import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm" version "1.8.22"
}

version = project.mod_version
group = project.maven_group

configurations {
    transitiveInclude
}

base {
    archivesName = project.archives_base_name
}


dependencies {
    implementation(transitiveInclude("io.ktor:ktor-server-content-negotiation-jvm:$ktor_version"))
    implementation(transitiveInclude("io.ktor:ktor-server-core-jvm:$ktor_version"))
    implementation(transitiveInclude("io.ktor:ktor-serialization-jackson-jvm:$ktor_version"))
    implementation(transitiveInclude("io.ktor:ktor-server-jetty-jvm:$ktor_version"))
    implementation(transitiveInclude("org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.7.1"))

    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    configurations.transitiveInclude.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def name = artifact.id.getComponentIdentifier().displayName

        if (name.contains("ktor") || name.contains("jetty") || name.contains("javax")) {
            include name
        }
    }
}


processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release.set(17)
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions.jvmTarget = 17
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}